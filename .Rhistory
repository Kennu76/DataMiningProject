30*5975
179268/
2
179268/12
179268/24
179268/18
179268/16
179268/22
179268/26
179268/28
179268/12
14939
14939/3
14939/6
14939/9
14939/12
14939/14
14939/16
14939/3
179268/6
179268/60
2987*60
starship_data <- starship_data[-c(1:48), ]
sds <- c()
secs <- c()
i = 0
for(m in 1:(length(starship_data$orientation_delta_z)/60)){
print(m)
secs <- (starship_data$orientation_delta_z[((m-1)*60+1):(m*starship_data)])
-(starship_data$accel_vec_z[((m-1)*starship_data+1):(m*starship_data)])
sds<-c(sds,sd(secs))
}
sds <- c()
secs <- c()
i = 0
for(m in 1:(length(starship_data$orientation_delta_z)/60)){
print(m)
secs <- (starship_data$orientation_delta_z[((m-1)*60+1):(m*60)])
-(starship_data$accel_vec_z[((m-1)*60+1):(m*60)])
sds<-c(sds,sd(secs))
}
ggplot(data=sds, aes( group=1)) +
geom_line()+
geom_point()
sds
ggplot(data=sds, aes( sds,group=1)) +
geom_line()+
geom_point()
plot(sds)
sds*10000000
plot(sds*1000000)
sds <- sds*1000000
plot(sds)
for(m in 1:length(sds)){
if (sds[m]<4000){
sds[m] <- 0
}
}
plot(sds)
length(sds)
plot(sds[2500:])
plot(sds[2500:987])
plot(sds[2500:2987])
plot(sds[2800:2987])
plot(sds[2900:2987])
plot(sds[2850:2987])
2890*90
2890*60
starship_data[173400,]
starship_data[173500,]
sds <- c()
secs <- c()
i = 0
for(m in 1:(length(starship_data$orientation_delta_z)/60)){
print(m)
secs <- (starship_data$orientation_delta_z[((m-1)*60+1):(m*60)])
-(starship_data$accel_vec_z[((m-1)*60+1):(m*60)])
sds<-c(sds,sd(secs))
}
range(sds)
data.table(sds)
summary(sds)
sds <- sds*1000000
summary(sds)
sds <- sds/100
summary(sds)
sds <- sds*100
sds <- sds*100
summary(sds)
round(2.030303,3)
round(2.030303,5)
round(2.030303)
sds <- sds/1000
summary(sds)
sds <- apply(round,sds)
?apply()
?sapply()
lapply(sds,round)
sds <- lapply(sds,round)
summary(sds)
summary(sds)
sds <- c()
secs <- c()
i = 0
for(m in 1:(length(starship_data$orientation_delta_z)/60)){
print(m)
secs <- (starship_data$orientation_delta_z[((m-1)*60+1):(m*60)])
-(starship_data$accel_vec_z[((m-1)*60+1):(m*60)])
sds<-c(sds,sd(secs))
}
sds
sds <- sds*1000
summary(sds)
sds <- sds*100
summary(sds)
sds <- sds/10
summary(sds)
round(c(0.3,0.4,1.9))
sds_rounded <- round(sds)
summary(sds_rounded)
plot(sds_rounded)
sds <- c()
secs <- c()
smaller_data <- c()
i = 0
for(m in 1:(length(starship_data$orientation_delta_z)/60)){
print(m)
smaller_data <- rbind(smaller_data,starship_data[((m-1)*60+1),])
smaller_data <- rbind(smaller_data,starship_data[((m)*60),])
secs <- (starship_data$orientation_delta_z[((m-1)*60+1):(m*60)])
-(starship_data$accel_vec_z[((m-1)*60+1):(m*60)])
sds<-c(sds,sd(secs))
}
View(smaller_data)
summary(sds_rounded)
quals <- c()
for(s in 1:length(sds_rounded)){
if(sds_rounded[s] < 20){
quals <- c(quals,"very good")
quals <- c(quals,"very good")
}
else if(sds_rounded[s] < 40){
quals <- c(quals,"good")
quals <- c(quals,"good")
}
else if(sds_rounded[s] < 60){
quals <- c(quals,"bad")
quals <- c(quals,"bad")
}
else {
quals <- c(quals,"very bad")
quals <- c(quals,"very bad")
}
}
quals
smaller_data$quality <- quals
quals <- c()
for(s in 1:length(sds_rounded)){
if(sds_rounded[s] < 20){
quals <- c(quals,4)
quals <- c(quals,4)
}
else if(sds_rounded[s] < 40){
quals <- c(quals,3)
quals <- c(quals,3)
}
else if(sds_rounded[s] < 60){
quals <- c(quals,2)
quals <- c(quals,2)
}
else {
quals <- c(quals,1)
quals <- c(quals,1)
}
}
smaller_data$quality <- quals
final_data <- c()
final_data <- as.data.frame(final_data)
final_data$timestamp <- smaller_data$timestamp
thing <- smaller_data[1:2,]
View(thing)
head(smaller_data)
thing <- smaller_data[0:2,]
head(smaller_data)
View(smaller_data)
View(thing)
seq(1,5974,2)
seq(1,5974,1)
seq(0,5973,2)
seq(2,5974,2)
thing <- smaller_data[seq(1,5974,2),]
thing2 <- smaller_data[seq(2,5974,2),]
thing$coordinates_lat_end <- thing2$coordinates_lat
thing$coordinates_long_end <- thing2$coordinates_long
final_data <- thing
View(final_data)
final_data <- final_data[,-c(4)]
final_data <- thing
final_data <- final_data[,-c(5)]
final_data <- thing
final_data <- final_data[,-c(5:20)]
final_data <- thing
final_data <- final_data[,-c(5:21)]
View(final_data)
write.csv(final_data, "final_data.csv")
write.csv(final_data, "C:/Users/Kevin/Desktop/Datamining/Project/DataMiningProject/starship/final_data.csv")
#################################
## DATA MINING - MTAT.03.183
## 5. JAN 2018
## MÄRTEN VESKIMÄE
#################################
library(tidyverse)
library(osmar)
#################################
## Spatial extent of
## OSM road data
#################################
# tln_box = center_bbox(center_lon=24.7536,center_lat=59.4370,width=32000,height=16000)
tln_box = center_bbox(center_lon=24.64714,center_lat=59.42753,width=12000,height=10000)
tln = get_osm(tln_box, source = osmsource_osmosis("estonia-latest.osm.bz2"))
tln_road = find(tln, way(tags(k%in%c("highway"))))
tln_roads = subset(tln, ids=find_down(tln, way(tln_road)))
save(tln_roads,file="bumpy/tln_roads.Rda")
tln_lines = as_sp(tln_roads, "lines")
#################################
## Joining roads with
## starship data
#################################
# Random data for testing
# sample_data = data.frame(lon = seq(24.47165,25.03556,0.003))
# sample_data$lat = seq(59.36519,59.50880,length.out=nrow(sample_data))
# sample_data = expand.grid(sample_data)
# sample_data$quality = rnorm(nrow(sample_data),5)
load("road_quality.Rda")
load("bumpy/tln_roads.Rda")
add_weights = function(lon_ss,lat_ss,weight,ways=F){
id = find(tln_roads, node(attrs(lon > (lon_ss-0.001) & lon < (lon_ss+0.001) &
lat > (lat_ss-0.001) & lat < (lat_ss+0.001))))
id_table = tln_roads$nodes$attrs[tln_roads$nodes$attrs$id %in% id,c("id","lon","lat")]
order = ((lon_ss - id_table$lon)^2) + ((lat_ss - id_table$lat)^2)
id = id[order(order)][1]
if(ways==T){
id = find_up(tln_roads, node(id))
# if(length(id$way_ids)==1){
obj = subset(tln_roads, ids = find_down(tln_roads, way(id$way_ids)))
if(length(obj$ways$attrs$id) > 0) return(data.frame(id = obj$ways$attrs$id,w = weight))
# }
} else return(data.frame(from_node_id = id,w = weight))
}
# Node weights
tln_nodes = lapply(1:nrow(road_quality), function(x){
add_weights(road_quality$lon[x],
road_quality$lat[x],
road_quality$quality[x])
}) %>% do.call(rbind.data.frame,.) %>%
group_by(from_node_id) %>%
summarise(w = sum(w))
# Way weights
ways_weights = lapply(1:nrow(road_quality), function(x){
add_weights(road_quality$lon[x],
road_quality$lat[x],
road_quality$quality[x],T)
}) %>% do.call(rbind.data.frame,.) %>%
group_by(id) %>%
summarise(w = mean(w))
## Adding weight data for map application
load("bumpy/tln_lines.Rda")
tln_lines@data$timestamp = NULL
tln_lines@data$w = NULL
tln_lines@data = tln_lines@data %>%
left_join(ways_weights, "id")
save(tln_lines,file="bumpy/tln_lines.Rda")
save(tln_nodes,file="bumpy/tln_nodes.Rda")
save(tln_roads,file="bumpy/tln_roads.Rda")
tln_box = center_bbox(center_lon=24.64714,center_lat=59.42753,width=12000,height=10000)
library(osmar)
install.packages(osmar)
install.packages('osmar')
library(tidyverse)
library(osmar)
tln_box = center_bbox(center_lon=24.64714,center_lat=59.42753,width=12000,height=10000)
tln = get_osm(tln_box, source = osmsource_osmosis("estonia-latest.osm.bz2"))
tln = get_osm(tln_box, source = osmsource_osmosis("estonia-latest.osm.bz2"))
library(tidyverse)
library(data.table)
load("starship_data.Rda")
load("tln_roads.Rda")
tallinn_nodes = tln_roads$nodes$attrs[c("lon","lat")]
tallinn_nodes = tallinn_nodes[!duplicated(tallinn_nodes),]
find_nearest_node = function(lon_ss,lat_ss){
box = tallinn_nodes[tallinn_nodes$lon > (lon_ss-0.001) &
tallinn_nodes$lon < (lon_ss+0.001) &
tallinn_nodes$lat > (lat_ss-0.001) &
tallinn_nodes$lat < (lat_ss+0.001),]
if(nrow(box)>0){
box$dist = (lon_ss-box$lon)^2 + (lat_ss-box$lat)^2
box[box$dist==min(box$dist),][1,1:2]
} else data.frame(lat = NA, lon = NA)
}
road_quality
#################################
## DATA MINING - MTAT.03.183
## 5. JAN 2018
## MÄRTEN VESKIMÄE
#################################
library(tidyverse)
library(data.table)
load("starship_data.Rda")
load("tln_roads.Rda")
tallinn_nodes = tln_roads$nodes$attrs[c("lon","lat")]
tallinn_nodes = tallinn_nodes[!duplicated(tallinn_nodes),]
find_nearest_node = function(lon_ss,lat_ss){
box = tallinn_nodes[tallinn_nodes$lon > (lon_ss-0.001) &
tallinn_nodes$lon < (lon_ss+0.001) &
tallinn_nodes$lat > (lat_ss-0.001) &
tallinn_nodes$lat < (lat_ss+0.001),]
if(nrow(box)>0){
box$dist = (lon_ss-box$lon)^2 + (lat_ss-box$lat)^2
box[box$dist==min(box$dist),][1,1:2]
} else data.frame(lat = NA, lon = NA)
}
road_quality = starship_data %>% filter(standstill_detected!=1)
nearest_nodes = lapply(1:nrow(road_quality),function(i){
find_nearest_node(road_quality$coordinates_long[i],road_quality$coordinates_lat[i])
})
nearest_nodes = data.frame(rbindlist(nearest_nodes))
road_quality$lon = nearest_nodes$lon
road_quality$lat = nearest_nodes$lat
road_quality = road_quality %>%
group_by(lon,lat) %>%
summarise(quality = (((var(orientation_delta_z,na.rm=T)+1)*
(var(starship_data$accel_vec_z,na.rm=T)+1))^10000)/100) %>%
na.omit()
road_quality %>%
ggplot() +
geom_point(data=tallinn_nodes, aes(lon,lat),alpha=.1,size=.02) +
geom_point(aes(lon,lat,color=quality)) +
theme_void()
save(road_quality,file="road_quality.Rda")
road_quality = starship_data %>% filter(standstill_detected!=1)
road_quality = starship_data %>% filter(standstill_detected!=1)
nearest_nodes = lapply(1:nrow(road_quality),function(i){
find_nearest_node(road_quality$coordinates_long[i],road_quality$coordinates_lat[i])
})
tallinn_nodes = tln_roads$nodes$attrs[c("lon","lat")]
load("tln_roads.Rda")
load("starship_data.Rda")
load("starship_data.Rda")
source('C:/Users/Kevin/Desktop/Datamining/Project/DataMiningProject/starship_starship2weights.R', encoding = 'UTF-8')
View(starship_data)
road_quality =  road_quality %>%
group_by(lon,lat) %>%
summarise(quality = (
((var(orientation_delta_z,na.rm=T)+1)*
(var(starship_data$accel_vec_z,na.rm=T)+1)^2)
^10000)/100000) %>%
na.omit()
View(road_quality)
road_quality = starship_data %>% filter(standstill_detected!=1)
library(tidyverse)
library(data.table)
road_quality = starship_data %>% filter(standstill_detected!=1)
road_quality$lon = nearest_nodes$lon
road_quality$lat = nearest_nodes$lat
nearest_nodes = lapply(1:nrow(road_quality),function(i){
find_nearest_node(road_quality$coordinates_long[i],road_quality$coordinates_lat[i])
})
nearest_nodes = data.frame(rbindlist(nearest_nodes))
road_quality$lon = nearest_nodes$lon
road_quality$lat = nearest_nodes$lat
road_quality =  road_quality %>%
group_by(lon,lat) %>%
summarise(quality = (
((var(orientation_delta_z,na.rm=T)+1)*
(var(starship_data$accel_vec_z,na.rm=T)+1)^2)
^10000)/100000) %>%
na.omit()
load("starship_data.Rda")
load("tln_roads.Rda")
tallinn_nodes = tln_roads$nodes$attrs[c("lon","lat")]
tallinn_nodes = tallinn_nodes[!duplicated(tallinn_nodes),]
find_nearest_node = function(lon_ss,lat_ss){
box = tallinn_nodes[tallinn_nodes$lon > (lon_ss-0.001) &
tallinn_nodes$lon < (lon_ss+0.001) &
tallinn_nodes$lat > (lat_ss-0.001) &
tallinn_nodes$lat < (lat_ss+0.001),]
if(nrow(box)>0){
box$dist = (lon_ss-box$lon)^2 + (lat_ss-box$lat)^2
box[box$dist==min(box$dist),][1,1:2]
} else data.frame(lat = NA, lon = NA)
}
road_quality = starship_data %>% filter(standstill_detected!=1)
nearest_nodes = lapply(1:nrow(road_quality),function(i){
find_nearest_node(road_quality$coordinates_long[i],road_quality$coordinates_lat[i])
})
nearest_nodes = data.frame(rbindlist(nearest_nodes))
road_quality$lon = nearest_nodes$lon
road_quality$lat = nearest_nodes$lat
road_quality =  road_quality %>%
group_by(lon,lat) %>%
summarise(quality = (
((var(orientation_delta_z,na.rm=T)+1)*
(var(starship_data$accel_vec_z,na.rm=T)+1)^2)
^10000)/100000) %>%
na.omit()
tallinn_nodes = tln_roads$nodes$attrs[c("lon","lat")]
load("tln_roads.Rda")
setwd("~/DataMiningProject")
library(tidyverse)
library(data.table)
load("starship_data.Rda")
load("tln_roads.Rda")
tallinn_nodes = tln_roads$nodes$attrs[c("lon","lat")]
tallinn_nodes = tallinn_nodes[!duplicated(tallinn_nodes),]
find_nearest_node = function(lon_ss,lat_ss){
box = tallinn_nodes[tallinn_nodes$lon > (lon_ss-0.001) &
tallinn_nodes$lon < (lon_ss+0.001) &
tallinn_nodes$lat > (lat_ss-0.001) &
tallinn_nodes$lat < (lat_ss+0.001),]
if(nrow(box)>0){
box$dist = (lon_ss-box$lon)^2 + (lat_ss-box$lat)^2
box[box$dist==min(box$dist),][1,1:2]
} else data.frame(lat = NA, lon = NA)
}
road_quality = starship_data %>% filter(standstill_detected!=1)
nearest_nodes = lapply(1:nrow(road_quality),function(i){
find_nearest_node(road_quality$coordinates_long[i],road_quality$coordinates_lat[i])
})
nearest_nodes = data.frame(rbindlist(nearest_nodes))
road_quality$lon = nearest_nodes$lon
road_quality$lat = nearest_nodes$lat
road_quality =  road_quality %>%
group_by(lon,lat) %>%
summarise(quality = (
((var(orientation_delta_z,na.rm=T)+1)*
(var(starship_data$accel_vec_z,na.rm=T)+1)^2)
^10000)/100000) %>%
na.omit()
View(road_quality)
road_quality = starship_data %>% filter(standstill_detected!=1)
road_quality$lon = nearest_nodes$lon
road_quality$lat = nearest_nodes$lat
road_quality_new =  road_quality %>%
group_by(lon,lat) %>%
summarise(quality = (
((var(orientation_delta_z,na.rm=T)+1)*
(var(starship_data$accel_vec_z,na.rm=T)+1))
^10000)/100000) %>%
na.omit()
View(road_quality_new)
road_quality_sub <- subset(road_quality_new,quality > 0.004273070)
road_quality_sub %>%
ggplot() +
geom_point(data=tallinn_nodes, aes(lon,lat),alpha=.1,size=.02) +
geom_point(aes(lon,lat,color=quality,size=1)) +
theme_void()+
scale_color_gradient(low="yellow",high="red")
road_quality_sub <- subset(road_quality_new,quality > 0.004273070)
road_quality_sub %>%
ggplot() +
geom_point(data=tallinn_nodes, aes(lon,lat),alpha=.1,size=.02) +
geom_point(aes(lon,lat,color=quality,size=1)) +
theme_void()+
scale_color_gradient(low="yellow",high="red")
x <- road_quality_new$quality
x <- (x-min(x))/(max(x)-min(x))
x
road_quality_new$quality
x
x <- road_quality_new$quality
x
max(x)
x <- (x-min(x))/(max(x)-min(x))
max(x)
min(x)
x<-x*100
x
round(x,4)
max(x)
road_quality_new$quality <- x
road_quality_sub <- subset(road_quality_new,quality > 11.441955)
road_quality_sub %>%
ggplot() +
geom_point(data=tallinn_nodes, aes(lon,lat),alpha=.1,size=.02) +
geom_point(aes(lon,lat,color=quality,size=0.5)) +
theme_void()+
scale_color_gradient(low="yellow",high="red")
road_quality %>%
ggplot() +
geom_point(data=tallinn_nodes, aes(lon,lat),alpha=.1,size=.02) +
geom_point(aes(lon,lat,color=quality,size=0.2)) +
theme_void()+
scale_color_gradient(low="yellow",high="red")
road_quality_new %>%
ggplot() +
geom_point(data=tallinn_nodes, aes(lon,lat),alpha=.1,size=.02) +
geom_point(aes(lon,lat,color=quality,size=0.2)) +
theme_void()+
scale_color_gradient(low="yellow",high="red")
road_quality_new %>%
ggplot() +
geom_point(data=tallinn_nodes, aes(lon,lat),alpha=.1,size=.02) +
geom_point(aes(lon,lat,color=quality,size=0.02)) +
theme_void()+
scale_color_gradient(low="yellow",high="red")
road_quality_new %>%
ggplot() +
geom_point(data=tallinn_nodes, aes(lon,lat),alpha=.1,size=.02) +
geom_point(aes(lon,lat,color=quality)) +
theme_void()+
scale_color_gradient(low="yellow",high="red")
save(road_quality_new,file="road_quality.Rda")
